<project name="Tag Admin Backend Build" default="info">

    <property name="bindir" value="${basedir}/bin"/>
    <property name="builddir" value="${basedir}/build" />
    <property name="sourcedir" value="${basedir}/src" />
    <property name="appdir" value="${basedir}/app" />
    <property name="webdir" value="${basedir}/web" />

    <condition property="global-env-prod" value="true" else="false">
        <equals arg1="${env}" arg2="prod" />
    </condition>

    <condition property="global-env" value="prod" else="dev">
        <equals arg1="${env}" arg2="prod" />
    </condition>

    <target name="info">
        <java classname="org.apache.tools.ant.Main">
            <arg value="-projecthelp" />
            <arg value="-buildfile" />
            <arg value="${ant.file}" />
        </java>
    </target>

    <target name="clean">
        <delete dir="${builddir}" />
    </target>

    <target name="prepare">
        <mkdir dir="${bindir}" />
        <mkdir dir="${builddir}/tests-reports" />
        <mkdir dir="${builddir}/logs" />
        <mkdir dir="${builddir}/coverage" />
        <mkdir dir="${webdir}/container-debugger" />
    </target>

    <target name="composer-download" description="Download composer from www.getcomposer.org">
        <exec executable="bash" failonerror="true">
            <arg value="-c" />
            <arg value="curl -sS https://getcomposer.org/installer | php -- --install-dir=${bindir} --filename=composer" />
        </exec>
    </target>

    <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print result in text format">
        <exec executable="${bindir}/phpcs" failonerror="true">
            <arg value="--standard=${basedir}/phpcs.xml" />
            <arg value="--extensions=php" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="license" description="Find source files without information about license.">
        <exec executable="${appdir}/license" failonerror="true"></exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer and print result in text format and log result in XML and HTML format">
        <exec executable="${bindir}/phpcs" failonerror="true">
            <arg value="--standard=${basedir}/phpcs.xml" />
            <arg value="--extensions=php" />
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${builddir}/logs/checkstyle.xml" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="${bindir}/phploc">
            <arg value="--log-csv" />
            <arg value="${builddir}/logs/phploc.csv" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <!--<sequential>-->
                <!--<antcall target="phpmd" />-->
                <!--<antcall target="phpmd-ci" />-->
            <!--</sequential>-->
            <sequential>
                <antcall target="phpcs" />
                <antcall target="phpcs-ci" />
                <antcall target="eslint" />
            </sequential>
            <antcall target="phploc" />
        </parallel>
    </target>

    <target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${bindir}/phpmd" failonerror="true">
            <arg path="${sourcedir}" />
            <arg value="text" />
            <arg value="${basedir}/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD and log result in html format">
        <exec executable="${bindir}/phpmd" failonerror="true">
            <arg path="${sourcedir}" />
            <arg value="xml" />
            <arg value="${basedir}/phpmd.xml" />
            <arg line="--reportfile ${builddir}/logs/phpmd.xml" />
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="${bindir}/phpunit" failonerror="true">
            <arg value="-c" />
            <arg path="${basedir}/phpunit.xml" />
            <arg line="--log-junit ${builddir}/tests-reports/phpunit.xml" />
        </exec>
    </target>

    <target name="behat" description="Run behat tests">
        <exec executable="${bindir}/behat" failonerror="true">
            <arg value="-c" />
            <arg path="${basedir}/behat.yml" />
        </exec>
    </target>

    <target name="vendors" description="Installing composer dependencies">
        <antcall target="vendors-dev" />
        <antcall target="vendors-prod" />
    </target>

    <target name="vendors-prod" if="${global-env-prod}" description="Installing composer dependencies">
        <exec executable="${bindir}/composer" failonerror="true">
            <env key="SYMFONY_ENV" value="prod" />
            <arg value="install" />
            <arg value="--prefer-dist" />
            <arg value="--no-dev" />
        </exec>
    </target>

    <target name="vendors-dev" unless="${global-env-prod}" description="Installing composer dependencies">
        <exec executable="${bindir}/composer" failonerror="true">
            <arg value="install" />
            <arg value="--prefer-dist" />
        </exec>
    </target>

    <target name="configuration" description="Copy parameters">
        <exec executable="cp" failonerror="true">
            <arg path="phpmd.xml.dist" />
            <arg path="phpmd.xml" />
        </exec>
        <exec executable="cp" failonerror="true">
            <arg path="phpunit.xml.dist" />
            <arg path="phpunit.xml" />
        </exec>
        <exec executable="cp" failonerror="true">
            <arg path="phpcs.xml.dist" />
            <arg path="phpcs.xml" />
        </exec>
        <exec executable="cp" failonerror="true">
            <arg path="behat.yml.dist" />
            <arg path="behat.yml" />
        </exec>
    </target>

    <target name="yarn-install" description="Install yarn dependencies for project">
        <exec executable="yarn" failonerror="true">
            <arg value="install" />
        </exec>
    </target>

    <target name="eslint" description="Static analysis of coding standards for javascript files">
        <exec executable="./node_modules/.bin/gulp" failonerror="true">
            <arg value="lint" />
        </exec>
    </target>



    <target name="webdriver-update" description="Install/Update the latest version of webdriver for e2e tests">
        <exec executable="./node_modules/.bin/gulp" failonerror="true">
            <arg value="webdriver:update" />
        </exec>
    </target>

    <target name="build-frontend" description="Build frontend application in provided environment">
        <exec executable="./node_modules/.bin/gulp" failonerror="true">
            <arg value="build" />
        </exec>
    </target>

    <target name="karma-unit" description="Run unit tests for javascript source code without containerjs source">
        <exec executable="./node_modules/.bin/gulp" failonerror="true">
            <arg value="test" />
        </exec>
    </target>

    <target name="yarn-install-containerjs">
        <exec executable="yarn" dir="${basedir}/containerjs" failonerror="true">
            <arg value="install" />
        </exec>
    </target>

    <target name="karma-containerjs-unit">
        <exec executable="./node_modules/.bin/gulp" dir="${basedir}/containerjs" failonerror="true">
            <arg value="tests:unit" />
        </exec>
    </target>

    <target name="saucelabs-debugger">
        <exec executable="./node_modules/.bin/gulp" dir="${basedir}" failonerror="true">
            <arg value="tests:debugger-unit:multiBrowsers" />
        </exec>
    </target>

    <target name="saucelabs-adminpanel">
        <exec executable="./node_modules/.bin/gulp" dir="${basedir}" failonerror="true">
            <arg value="tests:admin-unit:multiBrowsers" />
        </exec>
    </target>

    <target name="saucelabs-containerjs">
        <exec executable="./node_modules/.bin/gulp" dir="${basedir}/containerjs" failonerror="true">
            <arg value="tests:unit:multiBrowsers" />
        </exec>
    </target>

    <target name="composer-post-hook">
        <exec executable="${bindir}/composer" failonerror="true">
            <env key="SYMFONY_ENV" value="${global-env}" />
            <arg value="run-script" />
            <arg value="post-install-cmd" />
        </exec>
    </target>

    <target name="download-frontend-dependencies" description="Download frontend dependencies">
        <parallel threadCount="2">
<!--            <antcall target="bower-install" /> -->
            <antcall target="webdriver-update" />
        </parallel>
    </target>

    <target name="tsc-build" description="build typescript files">
        <exec executable="./node_modules/.bin/tsc" failonerror="false">
            <arg value="-p" />
            <arg value="./" />
        </exec>
    </target>

    <target name="e2e" description="Run e2e tests">
        <exec executable="npm" failonerror="true">
            <arg value="run-script" />
            <arg value="e2e" />
        </exec>
    </target>

    <target name="container-mock" description="build container mock for tests">
        <exec executable="./bin/console">
            <arg value="container:generate:js" />
            <arg value="43" />
            <arg value="--env=test" />
        </exec>
    </target>

    <target name="container-mock-for-debugger-e2e-tests" description="build container mock for e2e debugger tests">
        <exec executable="./bin/console">
            <arg value="container:generate:js" />
            <arg value="1" />
        </exec>
    </target>

    <target name="tag-tree-mock" description="build tag tree mock for tests">
        <exec executable="./bin/console">
            <arg value="container:generate:tag-tree" />
            <arg value="43" />
            <arg value="--env=test" />
        </exec>
    </target>

    <target name="generate-database-scheme" description="generate database with scheme">
        <exec executable="./bin/console">
            <arg value="cache:clear" />
            <arg value="--env=test" />
        </exec>
        <exec executable="./bin/console">
            <arg value="doctrine:schema:create" />
            <arg value="--env=test" />
        </exec>
    </target>

    <target name="load-fixtures" description="load fixtures for tests">
        <exec executable="./bin/console">
            <arg value="doctrine:fixtures:load" />
            <arg value="--no-interaction" />
            <arg value="--env=test" />
        </exec>
    </target>

    <target name="clear-database" description="clear database">
        <exec executable="./bin/console">
            <arg value="doctrine:database:drop"/>
            <arg value="--force"/>
        </exec>
        <exec executable="./bin/console">
            <arg value="doctrine:database:create"/>
        </exec>
        <exec executable="./bin/console">
            <arg value="doctrine:schema:create"/>
        </exec>
    </target>

    <target name="load-fixtures-for-e2e-debugger-tests" description="Load fixtures for e2e debugger tests">
        <exec executable="./bin/console">
            <arg value="doctrine:fixtures:load"/>
            <arg value="--fixtures=src/SevenTag/Api/TestBundle/DataFixtures/e2e-debugger"/>
            <arg value="--no-interaction"/>
        </exec>
    </target>

    <target name="e2e-debugger" description="Run e2e tests for debugger" depends="clear-database,load-fixtures-for-e2e-debugger-tests,container-mock-for-debugger-e2e-tests">
        <exec executable="./node_modules/.bin/gulp" failonerror="true">
            <arg value="tests:e2e-debugger" />
        </exec>
    </target>

    <target name="doctrine-schema-dump">
        <exec executable="${bindir}/console" failonerror="true" output="${basedir}/app/Resources/schema.sql">
            <arg value="doctrine:schema:create" />
            <arg value="--dump-sql" />
        </exec>
    </target>

    <target name="build" description="Run build">
        <parallel threadCount="2">
            <sequential>
                <antcall target="common" />
                <antcall target="vendors" />
            </sequential>
            <sequential>
                <antcall target="yarn-install" />
                <antcall target="tsc-build" />
                <antcall target="download-frontend-dependencies" />
                <antcall target="build-frontend" />
                <antcall target="composer-post-hook" />
            </sequential>
        </parallel>
    </target>

    <target name="tests-task" description="Run tests">
        <parallel threadCount="2">
            <antcall target="yarn-install-containerjs" />
            <sequential>
                <antcall target="phpunit" />
                <antcall target="generate-database-scheme" />
                <antcall target="load-fixtures" />
                <antcall target="container-mock" />
                <antcall target="tag-tree-mock" />
                <antcall target="karma-unit" />
                <antcall target="karma-containerjs-unit" />
                <antcall target="behat" />
            </sequential>
        </parallel>
    </target>

    <target name="e2e-selenium-firefox" description="run e2e tests on docker selenium">
        <parallel threadCount="2">
            <sequential>
                <!--<antcall target="build" />-->
                <antcall target="prepare-db" />
                <antcall target="e2e-selenium-task-firefox" />
            </sequential>
        </parallel>
    </target>

    <target name="e2e-selenium-chrome" description="run e2e tests on docker selenium">
        <parallel threadCount="2">
            <sequential>
                <!--<antcall target="build" />-->
                <antcall target="prepare-db" />
                <antcall target="e2e-selenium-task-chrome" />
            </sequential>
        </parallel>
    </target>

    <target name="prepare-db">
        <exec executable="./bin/console">
            <arg value="doctrine:schema:update" />
            <arg value="--force" />
        </exec>
        <exec executable="./bin/console">
            <arg value="doctrine:migrations:migrate" />
            <arg value="--no-interaction" />
        </exec>
        <exec executable="./bin/console">
            <arg value="doctrine:fixtures:load" />
            <arg value="--no-interaction" />
        </exec>
        <exec executable="./bin/console">
            <arg value="c:c" />
            <arg value="--env=prod" />
        </exec>
    </target>

    <target name="e2e-selenium-task-chrome" description="run e2e tests on docker selenium">
        <exec executable="./node_modules/.bin/gulp">
            <arg value="tests:e2e-admin-selenium-chrome" />
        </exec>
    </target>

    <target name="e2e-selenium-task-firefox" description="run e2e tests on docker selenium">
        <exec executable="./node_modules/.bin/gulp">
            <arg value="tests:e2e-admin-selenium-firefox" />
        </exec>
    </target>

    <target name="common" depends="clean,prepare,configuration,composer-download" />

    <target name="coding-standards" depends="license,tools-parallel" />

    <target name="tests" depends="build,coding-standards,tests-task" />
</project>
